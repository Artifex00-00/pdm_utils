This is the current pipeline to update and maintain the Phamerator MySQL database (as of 20170504).



Install Phamerator and dependencies as outlined in k_phamerate_instructions_CAB.pdf

The only binary dependency that has since changed is BLAST. The cdd_pp.py script now relies on NCBI BLAST+ executables and NOT the legacy BLAST executables.

Below is a list of all third-party python module dependencies:
    - Biopython
    - MySQLdb
    - pp
    - paramiko
    - tabulate








A suite of scripts enable an interactive, automated pipeline from retrieving new data to freezing a database for publication and pushing to the Hatfull server.


Scripts:

1. retrieve_database_updates.py = automatic retrieval of several types of data that is frequently updated in Phamerator
2. import_phage.py = imports data into Phamerator using a structured csv-formatted 'import table' containing instructions on how to update the database.
    - this script also performs many quality control checks on Genbank-formatted flatfiles
3. cdd_pp.py = identifies conserved domains in every gene in the database using parallel processing
    - the script contains a hard-coded path to the CDD directory
    - the script contains a hard-coded path to the BLAST+ toolkit
4. k_phamerate.py = creates gene phams using a kmer-based approach (kclust)
5. export_database.py = Export the updated database from MySQL and upload to the Hatfull server
6. freeze_database.py = Freeze a version of the database and remove all 'draft' genomes for publication purposes
7. compare_databases.py = Compares data stored in Phamerator, phagesdb, and NCBI to identify inconsistencies between the three databases
8. Misc. single-function scripts (e.g. update_geneid.py) = a collection of short scripts to update specific fields in the database.
    - note: these are not very robust



Format of import_table.csv file:
    a. Ticket action ("add", "remove", "update", "replace")
    b. PhageID (PhageID, "none")
    c. Host strain (any of the various host species, "Mycobacterium", etc..., "retrieve")
    d. Cluster or Subcluster ("A1", "A2", etc., "none"; singletons should be "Singleton", "retrieve")
    e. Status ("draft", "final", "gbk", "none")
    f. Description qualifier ("product", "note", "function", "none", "retrieve")
    g. Accession (Accession, "none", "retrieve")
    h. Program ("SEA","PHIRE","NCBI","none", "retrieve") [this functionality needs to be changed to be more specific for Phamerator needs]
    i. Genome to be replaced (PhageID, "none")



Important directories:

1. ~/PhameratorDB_Management/k_phamerate = git repo containing all phameration scripts/documents

2. ~/Databases/Phamerator/Actino_Draft = primary database directory for the Actino_Draft database, storing the current and backup databases and update history

3. ~/PhameratorDB_Management/mysql_queries = contains gene and genome data for updated databases that serve as a quick reference







1. Use current Actino_Draft database:
	a. Open Phamerator and ensure the most up-to-date version of the database has been downloaded into MySQL.
	b. Change database setting in Phamerator so that the program doesn't accidentally try to download newest version during the phameration process.
	c. Create new output folder in the Actino_Draft update_history folder to store all retrieval and import result files and folders.

2. In terminal, change directory to scripts folder: ~/PhameratorDB_Management/k_phamerate


3. Run the retrieve_database_updates.py script to check for various types of updates:
    a. Check for newly sequenced genomes on phagesdb, and pull the corresponding auto-annotated genomes from PECAAN
    b. Check for new SEA-PHAGES (SMART or non-SMART) annotated genomes on phagesdb
    c. Check for updates to NCBI records
    d. Check for metadata 'field' updates (for HostStrain, Cluster, Subcluster, etc.) from phagesdb


4. Manually check for any other genomes that need imported as indicated in the Online Phamerator Ticket Tracker:
    a. Create the appropriate import_table.csv (If needed)


5. For each type of retrieved genomes, run the import_phage.py script to import them into Phamerator:
    a. Organize all genbank-formatted files in the genomes folder
    b. Check file extensions: ".gb", ".gbf", ".gbk", or ".txt". 
    c. Make sure all fields in the import table are populated correctly and the file is in the fields folder
    d. Run ./import_phage.py
    e. Choose run type:
        - 'test run' can be performed to verify everything is in place correctly. 
        - 'production run' can be performed to actually make the changes
        - 'smart run' provides limited functionality for SMART team members to use
    f. Choose import mode:
        - 'Standard' import should almost always be chosen
        - 'All phages' import is for custom database construction and is intended for rare usage.
    g. Review the import log if needed.







After all retrieval and update scripts are executed:

6. Update other misc. information (if needed):
	a. e.g. Update gene descriptions: ./update_description.py
	b. e.g. Manually update fields in MySQL Workbench.


7. Identify NCBI conserved domains and create phams:
	a. ./cdd_pp.py Actino_Draft
	b. ./k_phamerate.py Actino_Draft



8. Run export_database.py to:
    a. Update version number
    b. Run MySQL gene and genome queries (not required, but is useful for quick reference)
    c. Export the new database and version files
    d. Upload the new files to the webfactional server



9. Ensure upload worked fine by opening Phamerator on a separate computer (not required, but useful to verify no errors occurred)
10. Update Online Phamerator Ticket Tracker: move resolved tickets to the 'actino_draft_ticket_tracker' spreadsheet in the update_history folder
11. Copy all resolved import tickets from the import tables to the 'actino_draft_ticket_tracker' spreadsheet in the update_history folder
12. Move all import folders and files from the working directory to the update_history folder





######################
Notes:

k_phamerate takes about two hours.
cdd_pp takes less than 15min








######################
Freezing Finals/Gbk_only database:



1. Run freeze_database.py
    - This will create a new database, drop all 'draft' genomes, and generate the new database name (e.g. Actinobacteriophage_123)
    - After this script runs, the 'frozen' database version is set to 0. It now contains inaccurate pham data, so the database needs to be re-phamerated.
    - As a result, no .sql or .version files are generated
    - Also, the script automatically creates a directory to store Current and Backup databases


2. Run k_phamerate.py on the new database


3. Run export_database.py:
    - increment version to 1
    - export .sql and .version files and upload to webfactional server




















######################
Alternative methods of performing specific parts of the import process, in the event the code breaks







Generate auto-annotated genomes using DNA Master in Windows:

    1. Copy folder of newly-sequenced, FASTA-formatted genomes from phagesdb data download page to Desktop.
    2. Add "_Draft" to file names using DOS command line:
	    a. for /R %i in (*.fasta) do ren "%i" "%~ni_Draft.fasta"
    3. Using DNAMaster, autoannotate FASTA files and export as gb files:
        a. Command line: DNAMas "C:\Users\Travis Mavrich\Desktop\PhameratorDB\FOLDER_NAME\" B 6047 8
	    b. Or if completed manually in DNA Master GUI: Be sure to choose the correct translation code before you choose to process the files!
    4. Transfer files to Ubuntu




Changing specific fields of specific phages in MySQL:
    a. For instance, to change the Cluster of a single phage, B3: UPDATE phage SET Cluster = 'BV' WHERE PhageID = 'B3'




Update version number and create a new database file:
    a. In MySQL workbench or command line: UPDATE version SET version = #
    b. In terminal, mysqldump -u root -p --skip-comments Actino_Draft > Actino_Draft.sql
    c. generate genome and gene files manually in MySQL command line
    d. In terminal, create the version file: echo # > Actino_Draft.version




Upload updated database to webfactional:
	a. change local directory to location of updated database
	b. scp Actino_Draft.version phamerator@phamerator.webfactional.com:/home/phamerator/webapps/htdocs/databases_Hatfull/
	c. scp Actino_Draft.sql phamerator@phamerator.webfactional.com:/home/phamerator/webapps/htdocs/databases_Hatfull/






Freeze a database:

1. In mysql command line:
    a. remove all draft genomes: DELETE FROM phage WHERE status = 'draft'
    b. set version to 1: UPDATE version SET version = 1

	
2. In terminal:
	a. run k_phamerate and cdd scripts on 'Actino_Draft'
	b. mysqldump 'Actino_Draft' to new folder and as a new name such as 'Actinobacteriophage_685':
		mysqldump -u root -p --skip-comments Actino_Draft > Actinobacteriophage_685.sql
	c. echo 1 > final_database.version
	d. upload new database to webfactional folder

3. In Phamerator
	a. Open Phamerator, and select 'Actino_Draft', so that the current version of this database (and not the one with only 'final' genomes) will be re-installed in MySQL
	b. Then select the newest frozen database, so that it will be installed in MySQL






Remove draft genomes from database in preparation for freezing:

1. In MySQL Workbench:

	a. choose 'Actino_Draft' database
	b. deselect Safe Mode:
		a. Under Menu Edit -> Preferences -> SQL Queries
		b. Uncheck "Safe Updates" (which prevents you from deleting rows in the phage table unless you're selecting by the PK)
		c. Under Menu Query -> Reconnect to Server
	c. Run the following command to delete draft genomes: DELETE FROM phage WHERE status = 'draft'
	d. Change the version to 1
	e. In MySQL, choose "Safe Updates" and reconnect to server to turn on safeties.


2. Continue on as indicated above, running k_phamerate.py...













Manually drop database from MySQL:
This can be useful when VM Phamerator GUI encounters an error during the download process of the new database from the server.
An error results in all data in the MySQL database getting erased, but since the database still exists Phamerator does not re-install.


1. In terminal:

    a. mysql -u root -p
    b. drop database Actino_Draft;
    c. exit
    
2. In the VM Phamerator GUI, try to download the newest version again.




Manually change the file extension for a directory of flatfiles to the permissible extension:

1. navigate to the folder containing flatfiles
2. run the following command (example provided changes gbf to gb): rename 's/\.gbf$/\.gb/' *.gbf










