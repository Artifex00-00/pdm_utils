Overview
========


The SEA-PHAGES data pipeline
----------------------------

PhameratorDB database administration occurs within the context of the entire SEA-PHAGES program, which begins with identification of new phages [Figure 1]. Thousands of undergraduate students isolate and purify new actinobacteriophages in the SEA-PHAGES course [ref Hanauer 2017]. Lysates are sent to the Pittsburgh Bacteriophage Institute Genome Sequencing Center where the DNA is extracted and sequenced, and where the new phage genome is assembled, clustered (and subclustered) relative to other actinobacteriophages, and uploaded to PhagesDB. “Metadata” regarding the genome, including location of isolation, designated cluster and subcluster, and host strain, is added to this database directly from the Genome Sequencing Center or from SEA-PHAGES students.

After new genomes are sequenced, genes need to be annotated. This is a refined, rigorous, multi-step process involving many participants [Figure 1]. First, a set of draft gene annotations are automatically generated using tools that predict coding and tRNA genes. The draft annotations are imported into PhameratorDB as a reference during the next stages. Second, manual gene annotations are generated by undergraduate students in the SEA-PHAGES bioinformatics course using a variety of computational tools. A team of trained, senior annotators review student annotations and generate preliminary final annotations. This annotation set is then evaluated using several automated and semi-automated quality control (QC) checks using PhameratorDB data management scripts. If the annotations fail QC, they are revised by annotators and re-submitted as many times as necessary until they pass QC. Once the annotations pass QC, they are accepted into PhameratorDB, and annotators deposit the final annotations into GenBank where they are assigned a unique accession identifier. Gene annotations can be continually refined, and corrections or updates can be made to the final GenBank annotations as often as needed by authors that are specifically listed in the GenBank record.

Several computational tools rely on PhameratorDB [Figure 1]. PhagesDB relies on PhameratorDB for gene data, including gene coordinates, descriptions, and phams. Starterator retrieves data from PhameratorDB and aligns genes within phams to help define gene start coordinates. The `Phage Evidence Collection And Annotation Network (PECAAN) website <https://discover.kbrinsgd.org>`_ utilizes data in PhameratorDB to provide various tools to help students record and predict gene functions.



The Phamerator database (PhameratorDB)
--------------------------------------

PhameratorDB is a MySQL database [ref Cresawn 2011]. The Phage, Gene, Pham, and Version tables represent the most important tables for the data management pipeline. The Phage table contains information that pertains to the entire phage genome, such as the genome sequence, the host strain, the designated cluster, etc. The Gene table contains information that pertains to individual genes, including coordinates, orientation, the gene product, etc. The Pham table contains a list of genes from the Gene table with their computed pham. The Version table keeps track of the database version and is updated every time the database is changed.

The primary PhameratorDB instance, Actino_Draft, serves not only as a repository of final, refined gene annotations, but also as a tool to facilitate the dynamic, iterative improvement of annotations. It is therefore valuable to be able to import new draft annotation data as soon as possible and rapidly replace it with progressively improving gene annotations. In order to facilitate this process, the pipeline relies on the `GenBank-formatted flat file <https://www.ncbi.nlm.nih.gov/Sitemap/samplerecord.html>`_ as the primary file format for importing annotation data into PhameratorDB [Figure 2]. This is a structured text file that systematically stores diverse types of information about the genome . A flat file can be generated for any genome at any annotation stage using GenBank, `DNA Master <http://cobamide2.bio.pitt.edu>`_, `PECAAN <<https://discover.kbrinsgd.org>`_, or the python coding package, `Biopython <https://biopython.org/>`_ [ref Cock 2009]. Flat file fields, such as LOCUS, DEFINITION, and REFERENCE-AUTHORS provide information regarding the entire record, while others, such as FEATURES, provide information about particular regions of the sequence in the record, such as tRNA or CDS genes. During the import process, data is parsed from flat files and stored in the Phage and Gene tables. If a previous annotated version of the genome is already present in the database, all data relating to that genome (including data in the Phage, Gene, and Pham tables) is removed and the genome is completely re-imported using the new flat file. Only in rare circumstances are individual fields in specific tables updated for specific phages with data not directly derived from a flat file.

The Actino_Draft database contains the most up-to-date actinobacteriophage annotation data, and it is routinely updated through a multi-step process [Figure 1]. The most up-to-date version is stored on the database administrator’s private, local computer. Data that needs to be added to the database is retrieved from various sources and staged in a structured local directory for import. New data (mostly in the form of flat files) is parsed and imported into the Phage and Gene tables, conserved domain data is retrieved from a local copy of the NCBI CDD and stored in the Gene, Domain, and Gene_Domain tables, and after genes are grouped into phams the pham data is stored in the Pham table. After all updates are implemented, the database version number is updated in the Version table. The updated Actino_Draft database is exported from MySQL into a single file, Actino_Draft.sql, and is uploaded to a public server where it replaces the old database file. Applications that rely on PhameratorDB data retrieve and parse this new database file.

In addition to improving the structure of PhameratorDB, several interactive scripts and tools have been developed to improve the database management process [Table 1]. These scripts are written in Python 3 and rely on several third-party Python packages or stand-alone command line tools. They should be executed from the command line in either Ubuntu OS or Mac OS, and they directly communicate with PhagesDB, GenBank, PECAAN, a local copy of the NCBI CDD, and a local copy of PhameratorDB in MySQL. The complete collection of scripts is stored in a k_phamerate repository and is tracked using the version control system, git (https://git-scm.com). The repository is publicly available on the SEA-PHAGES GitHub page (https://github.com/SEA-PHAGES/k_phamerate).


.. csv-table:: pipeline stages
    :file: ../images/pipeline_stages.csv



The k_phamerate scripts are designed to be executed separately to enhance flexibility of PhameratorDB management. In general, the k_phamerate repository can be used to manage different PhameratorDB instances. However, some scripts, or particular functions within scripts, are only applicable to the primary actinobacteriophage PhameratorDB instance, Actino_Draft. Many of the scripts are executed during each round of updates to the PhameratorDB instance. Below is a description of how each script or tool is used during a typical round of database updates to highlight how they function and work together.
