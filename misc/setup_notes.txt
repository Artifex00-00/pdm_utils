# Below are miscellaneous notes regarding the structure of the pdm_utils repository and how to maintain, to facilitate development.


# Description of the structure of the pdm_utils repo:

# 'src/pdm_utils/'
# All python source code is stored here. This folder is
# what generates the released pdm_utils python package and gets installed
# by pip.


# 'tests/'
# Unit and integration tests designed for pdm_utils.

# 'misc/'
# Miscellaneous documentation for maintaining Phamerator or the
# GitHub repository that should not be included in Sphinx-generated
# documentation.

# 'legacy/'
# A compilation of legacy Python2 scripts used to maintain the Phamerator
# database.

# 'docs/'
# All source and Sphinx-built files for pdm_utils documentation
# that are used for ReadTheDocs.

# 'setup.py', 'dist/', 'build/', and 'src/pdm_utils.egg-info'
# Files for, or generated by, Setuptools to generate archives that are uploaded to PyPI.

# 'requirements.txt'
# Formal list of third-party dependencies used by
# Sphinx, ReadTheDocs, and PyPI.

# 'README.md'
# general information about the GitHub repository.

# 'LICENSE.txt'
# license information.

# 'contributors.txt'
# list of developers who have contributed to this repository.






# Dependencies:
# The Sphinx documentation provides a list of python and binary dependencies to use the package.
# Additionally, there are several third-party python packages required for development:

sphinx
sphinx_rtd_theme
twine

# All python code in the repo can be executed using the following Conda
# environment 'pdm_utils-dev'.
# First install Anaconda locally. Then execute the following commands:
> conda create --name pdm_utils-dev mysql python pip biopython pymysql paramiko sphinx sphinx_rtd_theme twine tabulate
> source activate pdm_utils-dev




# Current versions:
# conda 4.5.11
# mysql  Ver 14.14 Distrib 5.7.24, for osx10.9 (x86_64) using  EditLine wrapper
# Python 3.7.3


# To add pdm_utils module to python's syspath on-the-fly,
# edit the following command so that it points to your local repo and
# execute it in bash:
> export PYTHONPATH="${PYTHONPATH}:/path/to/pdm_utils/src/"



# The directory of integration and unit tests can be stored completely
# separately from the actual package directory. However, in order for
# unittest to be able to import the module that needs to be tested,
# unittest needs to be run in the directory immediately above the module.
# Then, point unittest to the path of tests associated with the
# module that needs to be tested.
# e.g. root/src/pdm_utils/
# e.g. root/tests/
# In root/src, run:
> python3 -m unittest discover ../tests

# With this directory structure, in order to run unittest
# on a specific module of tests, execute a command like this from the
# root/src directory:
> python3 -m unittest discover ../tests/integration/ -p test_phamerator.py



# For Phamerator integration tests, it is expected that MySQL user 'pdm_anon'
# exists with password 'pdm_anon' that has all privileges for 'test_db' database.
# Log in to MySQL as the 'root' user and execute the following commands:
mysql> CREATE USER 'pdm_anon'@'localhost' IDENTIFIED BY 'pdm_anon';
mysql> GRANT ALL PRIVILEGES ON test_db.* TO 'pdm_anon'@'localhost';
mysql> GRANT SELECT ON *.* TO 'pdm_anon'@'localhost';
mysql> FLUSH PRIVILEGES;








# Sphinx
# For Sphinx to find the entire package for autodoc, and to
# NOT autodoc any other python files in the repo (such as tests),
# the package directory needs to be stored within a directory
# that contains no other files. So the primary 'pdm_utils' package
# directory is stored within 'src', and the sphinx 'config.py' file
# records that 'src' is where to start autodoc.
> sphinx-apidoc -o ./source/ ../pdm_utils/

# Execute these to refresh the build.
> make clean
> sphinx-build -b html ./source ./build
# (or make build?)











# To create a PyPI package

# Increment the version in setup.py

# Working directory = default is outside of top-level pdm_utils,
# but in setup.py the location can be specified using the
# 'package_dir' and 'packages' parameters.
> python3 setup.py sdist bdist_wheel


# To test with TestPyPI:
# In a terminal, using a 'dev' conda environment:
> python3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*

# In a separate terminal, using a 'user' conda environment:
> python3 -m pip install --index-url https://test.pypi.org/simple/ --no-deps pdm_utils

# OR install from local folder without using TestPYPI:
> pip install /path/to/folder/pdm_utils_XXXX.tar.gz


# Upload to PyPI
> twine upload dist/*
